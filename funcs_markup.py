# funcs_markup.py

from aiogram import types
import baza

# ============ Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ============

def get_start_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="gym"), types.KeyboardButton(text="üõ†Ô∏è")],
            [types.KeyboardButton(text="—è admin")]
        ],
        resize_keyboard=True
    )

def get_gym_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"), types.KeyboardButton(text="–ë–∞–∑–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π"), types.KeyboardButton(text="üõ†Ô∏è")],
            [types.KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è")]
        ],
        resize_keyboard=True
    )

def get_baza_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"), types.KeyboardButton(text="–ì—Ä—É–ø–ø—ã –º—ã—à—Ü"), types.KeyboardButton(text="–ò–∑–±—Ä–∞–Ω–Ω–æ–µ")],
            [types.KeyboardButton(text="–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ gym")]
        ],
        resize_keyboard=True
    )

def get_gym_group_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–°–ø–∏–Ω—É"), types.KeyboardButton(text="–ì—Ä—É–¥—å"), types.KeyboardButton(text="–ù–æ–≥–∏"), types.KeyboardButton(text="–†—É–∫–∏"), types.KeyboardButton(text="–ü–ª–µ—á–∏")],
            [types.KeyboardButton(text="–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–∞–∑—É")]
        ],
        resize_keyboard=True
    )

def get_admin_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"), types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º")],
            [types.KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è")]
        ],
        resize_keyboard=True
    )

# ============ Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ============

def get_gym_my_trains_keyboard():
    markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="1", callback_data="save1"),
            types.InlineKeyboardButton(text="2", callback_data="save2"),
            types.InlineKeyboardButton(text="3", callback_data="save3"),
            types.InlineKeyboardButton(text="4", callback_data="save4"),
            types.InlineKeyboardButton(text="5", callback_data="save5"),
        ],
        [
            types.InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data="more_info_saves"),
            types.InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_saves"),
        ]
    ])
    return markup

def get_gym_my_trains_deep_keyboard():
    markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="<-", callback_data="<-"),
            types.InlineKeyboardButton(text="->", callback_data="->"),
        ],
        [
            types.InlineKeyboardButton(text="1", callback_data="save1"),
            types.InlineKeyboardButton(text="2", callback_data="save2"),
            types.InlineKeyboardButton(text="3", callback_data="save3"),
            types.InlineKeyboardButton(text="4", callback_data="save4"),
            types.InlineKeyboardButton(text="5", callback_data="save5"),
        ],
        [
            types.InlineKeyboardButton(text="–£–±—Ä–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏", callback_data="less_info_saves"),
            types.InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_saves"),
        ]
    ])
    return markup

def get_gym_new_train_keyboard():
    markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="1", callback_data="save_train_1"),
            types.InlineKeyboardButton(text="2", callback_data="save_train_2"),
            types.InlineKeyboardButton(text="3", callback_data="save_train_3"),
            types.InlineKeyboardButton(text="4", callback_data="save_train_4"),
            types.InlineKeyboardButton(text="5", callback_data="save_train_5"),
        ],
        [
            types.InlineKeyboardButton(text="–≤—Å–µ —É–ø—Ä", callback_data="save_show_all_YPR"),
            types.InlineKeyboardButton(text="–ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data="save_show_fav_YPR"),
        ],
        [
            types.InlineKeyboardButton(text="–ù–æ–≥–∏", callback_data="save_show_legs"),
            types.InlineKeyboardButton(text="–°–ø–∏–Ω—É", callback_data="save_show_back"),
            types.InlineKeyboardButton(text="–†—É–∫–∏", callback_data="save_show_arms"),
            types.InlineKeyboardButton(text="–ì—Ä—É–¥—å", callback_data="save_show_chest"),
            types.InlineKeyboardButton(text="–ü–ª–µ—á–∏", callback_data="save_show_shoulders"),
        ]
    ])
    return markup

# ========== –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –∏–∑–±—Ä–∞–Ω–Ω—ã–º, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏ –≤—ã–≤–æ–¥–æ–º ==========

def save_train1_5(user_id, text, number):
    db = baza.SQLutils()
    save_ypr = "       " + text
    db.put_saves_t(user_id, f"my_train_{number}", save_ypr)
    db.close()
    return baza.print_all_by_nums(text.split(","))

def add_favorite_todb(user_id, text):
    db = baza.SQLutils()
    fav_mess = baza.print_all_by_nums(text.split(","))
    old_mess = db.get_favorite_YPR(user_id)
    if old_mess is None:
        old_mess = ""
    new_fav = old_mess + fav_mess
    db.put_favorite_YPR(user_id, new_fav)
    db.close()
    return fav_mess

def del_by_num(user_id, text):
    end_save = ""
    end_mess = ""
    nums = text.split(",")
    db = baza.SQLutils()
    massiv = db.get_favorite_YPR(user_id).split('\n')
    for num in nums:
        del_num = str(int(num)) + "."
        for el in range(len(massiv) - 1):
            if del_num in massiv[el]:
                end_mess += f"{massiv[el]}\n"
                massiv.pop(el)
                break
    for strochka in massiv:
        if strochka != "":
            end_save += f"{strochka}\n"
    db.put_favorite_YPR(user_id, end_save)
    db.close()
    return end_mess

def favorite_show(user_id):
    db = baza.SQLutils()
    fav = db.get_favorite_YPR(user_id)
    db.close()
    return fav if fav else "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π."
